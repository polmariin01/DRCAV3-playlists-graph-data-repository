NEO4J

Neo4J in 100 seconds - https://youtu.be/T6L9EoBy8Zk

An ACID complain graph database that can handle the extremely complex relational data of the modern world
Created in 2007 by Emil Eifrem, written in Java

Traditional relational databases don't adapt to how humans think about relations of data
Naturally we think about connections between entities

Structure:
Nodes represent entities
Edges represent relations
Properties are key value pairs that store data on these objects

Properties of a node:
{
    name: 'bob',
    age: 19,
    strength: 23
    ...
}

NEO4J is a true native graph database that aplies the graph model all way down to the storage level

Queries are written in a language called cypher that resembles SQL

Neo4J is used used in recomendation engines, social media platforms & knowledge graphs for artificial intelligence
Can be used with Docker or Neo4jAuraDB in the cloud
We can make queries with cypher






CYPHER LANGUAGE

SQL like language for querying but based with nodes and relations

              NODE        RELATIONSHIP NODE
       _________
       
       |_________   ___|__    _|__
MATCH (:Human {name:"Bob"})-[:LOVES]->(whom) RETURN whom

Sintax:

Nodes surrounded by parenthesis ()
Nodes connect to other nodes with arrows
Relationships are in brackets []

CREATE() - add data to the graph
CREATE(:User) - label to group similar nodes
CREATE(:User {name: "Pol Marin"}) - add properties to the node

CREATE(:User {name: "Pol Marin"})-[:FOLLOWS] - Create relationship
CREATE(:User {name: "Pol Marin", })-[:FOLLOWS]->(:User {name: "Adria Bedmar})
Relational data is created :)

There are no needs for foreign keys, joins or migrations :)))

We can create constraints

CREATE (j:User {name: "@polmarin"})-[r:FOLLOWS]->(n:User {name: "@adriabedmar"})
CREATE CONSTRAINT ON (user:User) ASSERT user.name IS UNIQUE
CREATE CONSTRAINT FOR (user:User) ASSERT user.name 

j, r, n will be local variables

RETURN j, r, n #Returns json with properties of the variables

We can visualize it as an interactive graph or even as a table

Example Twitter:

CREATE (:User {name: @pol })-[:SAYS]->(:Tweet {
    text: "hola bona tarda",
    created: date("2023-01-02")
})
# Creem la relaciÃ³ entre l'usuari i el tuit

MATCH (u:User {name: "@polmarin"})->[:FOLLOWS]->(:User)--(t:Tweet)

WHERE t.created > date("2023-01-01")

RETURN t.text

WHERE # can be more things,  filter

For example:

WHERE t.text ~= "(?i)Hi.*" #String patterns

WHERE NOT (u)-[:MUTED]->(:User) #Only retrieve tweets from users that have not been muted


Exemple Movies

MATCH

MATCH (a:Person {name:'Tom Hanks'}) RETUNR a
# Return single node Person who was name Tom Hanks

CREATE

CREATE (a:Person {name: 'Brie Larson', born: 1989}) RETURN a
CREATE (a:Movie {title:'Captain Marvel', released:2019, tagline:'Everything begins with a (her)o'}) RETURN about

DELETE

MATCH (a:Person {name: 'Brie Larson'}) DETACH DELETE a
MATCH (a:Movie {title: 'Captain Marvel'}) DETACH DELETE a

MERGE - Aviod duplicates

MERGE (a:Person {name:'Brie Larson'})
ON CREATE SET a.born = 1989
ON MATCH SET a.stars = COALESCE(a.stars, 0)
return a
#Update a person named Brie Larson
# ON CREATE branch to set values newly for created nodes
# ON MATCH branch to update values for existing nodes

MATCH together

MATCH (a:Person {name:'Brie Larson'}), (b:Movie {title:'Captain Marvel'})
MERGE (a)-[r:ACTED_IN]->(b) SET r.roles = ['Carol Danvers']
RETURN a,r,b
#Relaciona Person 'Brie Larson' amb Pelicula

List comprehensions
MATCH (a:Person {name:'Brie Larson'}), (b:Movie {title:'Captain Marvel'})
MERGE (a)-[r:ACTED_IN]->(b) 
SET r.roles = [x in r.roles WHERE x <> 'Captain Marvel'] + ['Captain Marvel']
RETURN a,r,b

WHERE

MATCH (a:Person) WHERE a.name STARTS WITH 'Tom' RETURN a
MATCH (a:Movie) WHERE a.released > 1990 AND a.released < 2000 RETURN a

MATCH more

List movies with Actor Tom Hanks
MATCH (a:Person {name:'Tom Hanks'})-[:ACTED_IN]->(m:Movie) RETURN a,m

Who directed the movie Cloud Atlas
MATCH (m:Movie {title:'Cloud Atlas'})<-[:DIRECTED]-(d:Person) RETURN d

Valuable results

Co-actors of actor Tom Hanks, returns list of names
MATCH (a:Person {name:'Tom Hanks'})-[:ACTED_IN]->(m)<-[:ACTED_IN]-(c) RETURN c.name

